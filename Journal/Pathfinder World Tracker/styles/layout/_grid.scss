/**
 * Grid System
 * Responsive grid layout using CSS Grid
 */

// Container
.container {
  width: 100%;
  padding-right: var(--content-padding);
  padding-left: var(--content-padding);
  margin-right: auto;
  margin-left: auto;
}

// Fluid container (full width)
.container-fluid {
  width: 100%;
  padding-right: var(--content-padding);
  padding-left: var(--content-padding);
  margin-right: auto;
  margin-left: auto;
}

// Responsive container widths
@each $breakpoint, $container-max-width in $container-max-widths {
  .container-#{$breakpoint} {
    @extend .container-fluid;
  }

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    .container-#{$breakpoint} {
      max-width: $container-max-width;
    }
  }
}

// Grid container
.grid {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: var(--spacer-3);
  width: 100%;
  margin: 0 auto;
}

// Grid columns
@for $i from 1 through 12 {
  .col-#{$i} {
    grid-column: span $i;
  }
}

// Responsive grid columns
@each $breakpoint, $value in $grid-breakpoints {
  @include media-breakpoint-up($breakpoint) {
    @for $i from 1 through 12 {
      .col-#{$breakpoint}-#{$i} {
        grid-column: span $i;
      }
    }
  }
}

// Grid gaps
@each $spacer, $value in $spacers {
  .gap-#{$spacer} {
    gap: $value !important;
  }
  
  .gap-x-#{$spacer} {
    column-gap: $value !important;
  }
  
  .gap-y-#{$spacer} {
    row-gap: $value !important;
  }
}

// Grid auto flow
.grid-flow-row {
  grid-auto-flow: row;
}

.grid-flow-col {
  grid-auto-flow: column;
}

.grid-flow-dense {
  grid-auto-flow: dense;
}

// Grid auto columns/rows
.grid-auto-cols-auto {
  grid-auto-columns: auto;
}

.grid-auto-cols-min {
  grid-auto-columns: min-content;
}

.grid-auto-cols-max {
  grid-auto-columns: max-content;
}

.grid-auto-rows-auto {
  grid-auto-rows: auto;
}

.grid-auto-rows-min {
  grid-auto-rows: min-content;
}

.grid-auto-rows-max {
  grid-auto-rows: max-content;
}

// Grid template columns/rows
.grid-cols-1 {
  grid-template-columns: repeat(1, minmax(0, 1fr));
}

.grid-cols-2 {
  grid-template-columns: repeat(2, minmax(0, 1fr));
}

.grid-cols-3 {
  grid-template-columns: repeat(3, minmax(0, 1fr));
}

.grid-cols-4 {
  grid-template-columns: repeat(4, minmax(0, 1fr));
}

.grid-cols-5 {
  grid-template-columns: repeat(5, minmax(0, 1fr));
}

.grid-cols-6 {
  grid-template-columns: repeat(6, minmax(0, 1fr));
}

.grid-cols-7 {
  grid-template-columns: repeat(7, minmax(0, 1fr));
}

.grid-cols-8 {
  grid-template-columns: repeat(8, minmax(0, 1fr));
}

.grid-cols-9 {
  grid-template-columns: repeat(9, minmax(0, 1fr));
}

.grid-cols-10 {
  grid-template-columns: repeat(10, minmax(0, 1fr));
}

.grid-cols-11 {
  grid-template-columns: repeat(11, minmax(0, 1fr));
}

.grid-cols-12 {
  grid-template-columns: repeat(12, minmax(0, 1fr));
}

.grid-rows-1 {
  grid-template-rows: repeat(1, minmax(0, 1fr));
}

.grid-rows-2 {
  grid-template-rows: repeat(2, minmax(0, 1fr));
}

.grid-rows-3 {
  grid-template-rows: repeat(3, minmax(0, 1fr));
}

.grid-rows-4 {
  grid-template-rows: repeat(4, minmax(0, 1fr));
}

.grid-rows-5 {
  grid-template-rows: repeat(5, minmax(0, 1fr));
}

.grid-rows-6 {
  grid-template-rows: repeat(6, minmax(0, 1fr));
}

// Grid column/row span
@for $i from 1 through 12 {
  .col-span-#{$i} {
    grid-column: span $i / span $i;
  }
  
  .row-span-#{$i} {
    grid-row: span $i / span $i;
  }
}

// Grid column/row start/end
@for $i from 1 through 12 {
  .col-start-#{$i} {
    grid-column-start: $i;
  }
  
  .col-end-#{$i} {
    grid-column-end: $i;
  }
  
  .row-start-#{$i} {
    grid-row-start: $i;
  }
  
  .row-end-#{$i} {
    grid-row-end: $i;
  }
}

// Responsive grid utilities
@each $breakpoint, $value in $grid-breakpoints {
  @include media-breakpoint-up($breakpoint) {
    .grid-#{$breakpoint} {
      display: grid !important;
    }
    
    .hidden-#{$breakpoint} {
      display: none !important;
    }
    
    @for $i from 1 through 12 {
      .#{$breakpoint}\:col-span-#{$i} {
        grid-column: span $i / span $i;
      }
      
      .#{$breakpoint}\:row-span-#{$i} {
        grid-row: span $i / span $i;
      }
      
      .#{$breakpoint}\:col-start-#{$i} {
        grid-column-start: $i;
      }
      
      .#{$breakpoint}\:col-end-#{$i} {
        grid-column-end: $i;
      }
      
      .#{$breakpoint}\:row-start-#{$i} {
        grid-row-start: $i;
      }
      
      .#{$breakpoint}\:row-end-#{$i} {
        grid-row-end: $i;
      }
    }
  }
}
